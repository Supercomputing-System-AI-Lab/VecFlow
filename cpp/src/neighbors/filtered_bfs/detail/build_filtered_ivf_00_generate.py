#!/usr/bin/env python3

def generate_license_header() -> str:
    return '''/*
 * Copyright (c) 2023-2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */'''

def generate_autogen_notice() -> str:
    return '''/*
 * NOTE: this file is generated by build_filtered_ivf_00_generate.py
 *
 * Make changes there and run in this directory:
 *
 * > python build_filtered_ivf_00_generate.py
 *
 */'''

def generate_includes() -> str:
    return '''#include <cuvs/neighbors/filtered_bfs.hpp>
    
#include "../build_filtered_ivf.cuh"'''

def generate_macro() -> str:
    return '''#define instantiate_build_filtered_ivf_d(idx_t, data_t) \\
  void cuvs::neighbors::build_filtered_IVF_index( \\
    raft::resources const& handle, \\
    cuvs::neighbors::ivf_flat::index<data_t, idx_t>* idx, \\
    raft::device_matrix_view<const data_t, int64_t, raft::row_major> dataset, \\
    raft::device_vector_view<uint32_t, int64_t> index_map, \\
    raft::device_vector_view<uint32_t, int64_t> label_size, \\
    raft::device_vector_view<uint32_t, int64_t> label_offset) \\
  { \\
    build_filtered_IVF_index_impl<idx_t, data_t>( \\
      handle, idx, dataset, index_map, label_size, label_offset); \\
  }'''

def generate_file_content(idx_t: str, data_t: str) -> str:
    content = [
        generate_license_header(),
        "",
        generate_autogen_notice(),
        "",
        generate_includes(),
        "",
        generate_macro(),
        "",
        f"instantiate_build_filtered_ivf_d({idx_t}, {data_t});",
        "",
        "#undef instantiate_build_filtered_ivf_d",
        ""
    ]
    return "\n".join(content)

def main():
    # Define the template parameter combinations to instantiate
    combinations = [
        ("int64_t", "float"),
        ("int64_t", "uint8_t"),
        ("int64_t", "int8_t"),
        ("int64_t", "half")
    ]
    
    # Generate a separate file for each combination
    for idx_t, data_t in combinations:
        filename = f"build_filtered_ivf_{data_t}.cu"
        content = generate_file_content(idx_t, data_t)
        
        with open(filename, "w") as f:
            f.write(content)

if __name__ == "__main__":
    main()